; ****************************************
; *** DEFINITIONS & ROM INITIALIZATION ***
; ****************************************

.MEMORYMAP
    DEFAULTSLOT 1
    SLOTSIZE $4000
    SLOT 0 $0000
    SLOT 1 $4000
.ENDME

.ROMBANKSIZE $4000
.ROMBANKS 32                    ; 32 banks
.ROMSIZE 4
.ROMGBCONLY                     ; Writes $C0 ("GBC only") into $0143 (CGB flag)
.COMPUTEGBCOMPLEMENTCHECK       ; Computes the ROM complement check ($014D)
.COMPUTEGBCHECKSUM              ; Computes the ROM checksum ($014E-$014F)

.BACKGROUND "Final Fantasy Legend III (USA).gb"        ; This loads the ROM so we can write directly into it
.UNBACKGROUND $3E70 $3FFF       ; Free space in bank $00
; ...

.include "definitions.asm"		; Definitions
.include "macros.asm"			; Macros 

.BANK 0 SLOT 0
.ORG $0201
.SECTION "DxInitHook" OVERWRITE
	call DxInit
.ENDS

.BANK $00 SLOT 0
.SECTION "Init" FREE
 DxInit:
	push af
	ld a, 1
	ldh ($4D), a
	stop
	nop
	pop af

    push hl
    ld hl,InitBGPal
    call SET_BGPAL
    ld hl,InitOBJPal
    call SET_OBJPAL
    pop hl
    call $374A          ; Replaced code
    ret
 InitBGPal:
    .db $D6,$5A,$FF,$7F,$5A,$6B,$00,$00
	.db $DC,$22,$0A,$10,$96,$11,$00,$00
	.db $2A,$2A,$76,$53,$51,$23,$0A,$01
	.db $53,$73,$FF,$7F,$2D,$6A,$00,$41
	.db $0C,$11,$5C,$53,$14,$32,$0A,$01
	.db $56,$3A,$9E,$6B,$1A,$5B,$00,$00
	.db $53,$73,$FF,$7F,$2D,$6A,$00,$00
	.db $53,$73,$FF,$7F,$2D,$6A,$00,$00
 InitOBJPal:
    .db $FF,$7F,$9F,$76,$DE,$71,$00,$00,$77,$77,$FF,$7F,$2D,$6A,$00,$00,$77,$77,$FF,$7F,$7B,$0E,$00,$00
.ENDS

.BANK 0 SLOT 0
.SECTION "BasicFunctions" FREE
 ; **SET BACKGROUND PALETTES**
 ; Writes $40 bytes located at HL to the BG Palette.
 SET_BGPAL:
    ld a,$80            ; Set index to first color + auto-increment
    ldh (<BCPS),a       
    ld b,64             ; 64=0x40 bytes
    
 ; Checks if $FF69 is accessible:
 LoopBGPAL:
    WAITBLANK
    
    ; Sets BG Palettes:
    ldi a,(hl)
    ldh (<BCPD),a
    dec b
    jr nz,LoopBGPAL
    ret

 ; **SET SPRITE PALETTES**
 ; Same as before but with the Sprites/OBJ Palette. 
 SET_OBJPAL:
    ld a, $80           ; Set index to first color + auto-increment
    ldh (<OCPS), a  ; 
    ld b, 64                ; 64=0x40 bytes
    
 ; Checks if $FF69 is accessible:
 LoopOBJPAL:
    WAITBLANK
    
    ; Sets OBJ Palettes:
    ldi a,(hl)
    ldh (<OCPD),a
    dec b
    jr nz,LoopOBJPAL
    ret
.ENDS

;data at ROM6:4700 is meta tiles... specifically the grass one?

.BANK $16 SLOT 1
.ORGA $4000
.SECTION "Metatile Attributes" OVERWRITE
MetatileAttr:
	;4000
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	;4100
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	;4200
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	;4300
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	;4400
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	;4500
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	;4600
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;1a 1a 1a 1a 1a 1a 1a 1a 6b 7b 6c 7c 6d 7d 6e 7e
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;32 32 21 31 21 31 22 22 22 22 22 22 20 30 22 22
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;32 32 20 30 4a 60 4b 60 2e 60 4b 60 48 58 49 59
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;0b 0b 0c 0c 0b 1b 0c 1c 22 22 22 22 3b 3b 3b 3b
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;2b 2b 2b 2b 61 71 64 74 66 76 67 77 6b 69 6c 6a
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;79 7d 7a 7e 32 32 32 32 32 32 32 32 0f 1a 0f 1a
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;4c 5f 4d 5e 5e 5f 5f 5e ff 60 ff 60 ff ff ff ff
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;48 58 49 59 61 65 64 68 65 65 68 68 2b 2b 2b 2b
    .db $00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$03,$03,$00,$00,$00,$00	;1a 1a 1a 1a 74 74 74 74 24 34 21 31 25 30 21 31					WATER
    .db $04,$03,$04,$03,$04,$03,$04,$03,$04,$04,$04,$04,$00,$00,$00,$00	;22 35 23 33 22 32 23 33 62 72 62 72 47 49 48 4a	WATER	WATER	WALL
    .db $00,$00,$00,$00,$04,$04,$04,$04,$01,$01,$01,$01,$01,$01,$01,$01	;5a 5a 5a 5a 40 50 41 51 42 52 42 52 52 52 52 52			DOOR	ROOF	ROOF
    .db $05,$05,$05,$05,$05,$05,$05,$05,$00,$00,$00,$00,$00,$00,$00,$00	;43 53 43 53 44 54 44 54 4d 4d 4e 4e 6e 7e 6f 7f	HOUSE	HOUSE
    .db $01,$01,$01,$01,$04,$04,$04,$04,$03,$03,$03,$03,$01,$01,$01,$01	;42 52 4f 5f 26 36 27 37 6a 7a 6b 7b 59 59 5a 5a	ROOF	PATH	WELL	WOOD
    .db $00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$04,$00,$00,$00,$00	;4b 5b 4c 5c 4d 4d 4e 4e 73 63 73 63 22 78 23 79					WALL
    .db $04,$04,$04,$04,$01,$01,$01,$01,$03,$03,$03,$03,$03,$03,$03,$03	;63 73 63 73 45 55 46 56 04 14 05 15 06 16 07 17	WALL	ROOF	SIGN	SIGN
    .db $03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03	;08 18 09 19 0a 1a 0b 1b 0c 1c 0d 1d 0e 1e 0f 1f	SIGN	SIGN	SIGN	SIGN
	;4700
    .db $02,$02,$02,$02,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04	;66 76 67 77 28 28 28 28 5d 5d 28 28 5d 5e 28 28	FLOWER	DESERT	DSSHDW	DSSHDW
    .db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02	;6c 7c 6d 7d 5d 5d 6d 7d 5d 5e 6d 7d 2a 3a 2b 3b 	GRASS	GRSHDW	GRSHDW	TREE1	
    .db $02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$00,$01,$01,$01,$01	;2c 3c 2d 3d 2e 3e 2f 3f 68 78 69 79 75 75 75 75	TREE2	TREE3			WOOD
    .db $01,$01,$01,$01,$00,$00,$00,$00,$01,$01,$01,$01,$02,$02,$02,$02	;64 64 65 65 60 70 61 71 47 57 48 58 6c 7c 6d 7d	WOOD			WOOD	GRASS
    .db $00,$00,$00,$00,$03,$03,$03,$03,$01,$01,$01,$01,$00,$00,$00,$00	;28 28 28 28 20 30 21 31 75 75 75 75 60 70 61 71			WATER	WOOD
    .db $00,$00,$00,$00,$00,$03,$03,$03,$00,$00,$00,$00,$02,$03,$02,$03	;60 70 61 71 25 30 21 31 22 35 23 33 22 32 23 33
    .db $04,$04,$04,$04,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$04,$04	;62 72 62 72 47 49 48 4a 5a 5a 5a 5a 40 50 41 51	WALL					DOOR
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;42 52 42 52 52 52 52 52 43 53 43 53 44 54 44 54
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$02	;4d 4d 4e 4e 44 54 44 54 42 52 4f 5f 26 36 27 37
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;6a 7a 6b 7b 59 59 5a 5a 4b 5b 4c 5c 4d 4d 4e 4e
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;4d 4d 4e 4e 49 57 4a 58 6f 6f 6f 6f 45 55 46 56
    .db $03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03	;04 14 05 15 06 16 07 17 08 18 09 19 0a 1a 0b 1b	SIGN	SIGN	SIGN	SIGN
    .db $03,$03,$03,$03,$03,$03,$03,$03,$00,$00,$00,$00,$00,$00,$00,$00	;0c 1c 0d 1d 0e 1e 0f 1f 6f 6f 6f 6f 28 28 28 28	SIGN	SIGN
    .db $00,$00,$00,$00,$02,$02,$02,$02,$03,$03,$03,$03,$00,$00,$00,$00	;5d 5d 28 28 5d 5e 28 28 24 34 21 31 39 39 39 39			?		WATER
    .db $02,$02,$02,$02,$03,$02,$03,$02,$03,$02,$03,$02,$02,$02,$02,$02	;29 29 39 39 22 39 23 39 22 29 23 39 38 39 39 38
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00	;6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f 6f
	;4800
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$02,$02,$02 ;47 57 48 58 65 7a 65 7a 28 28 28 28 20 30 21 31
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;62 72 63 73 64 64 66 66 67 67 67 67 77 77 65 65
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;64 74 66 66 77 77 65 75 68 78 69 79 76 76 76 76
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;6a 7a 6a 7a 6c 7c 6c 7c 6b 7b 6c 7c 60 70 61 71
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;6d 7d 6e 7e 32 30 33 31 20 30 32 31 58 58 59 59
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;58 58 59 59 2b 2b 2b 2b 2c 3c 2c 3c 08 08 08 08
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;4c 6f 4d 7f 6f 6f 7f 7f 4a 5a 4b 5b 2e 3e 4b 5b
    .db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;2e 2f 4b 5b 6b 7b 6c 7c 08 08 08 08 4a 60 4b 60
    .db $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05 ;2e 60 4b 60 0b 0b 0b 0b 00 10 01 11 6b 69 6c 6a
    .db $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05 ;32 32 21 31 21 31 22 22 22 22 22 22 32 32 20 30
    .db $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05 ;20 30 22 22 0b 0b 0b 0b 32 32 32 32 58 58 59 59
    .db $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05 ;00 10 01 11 0b 0b 0b 0b 08 08 08 08 0b 60 0b 60
    .db $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05 ;4c 5f 4d 5e 2b 2b 2b 2b 2b 2b 2b 2b 61 71 64 74
    .db $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05 ;66 75 67 78 4a 5a 4b 5b ff ff ff ff 4a 5a 4b 5b
    .db $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05 ;0b 0b 0b 0b 37 37 37 37 37 37 37 37 78 68 79 69
    .db $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05 ;40 50 41 51 42 52 43 53 64 74 65 75 66 76 67 77	FLOOR
	;4900
    .db $05,$05,$05,$05,$05,$05,$05,$05,$03,$03,$03,$03,$03,$03,$03,$03 ;60 70 61 71 62 72 63 73 44 54 45 55 46 56 47 57					SIGN	SIGN
    .db $03,$03,$03,$03,$03,$03,$03,$03,$05,$05,$05,$05,$05,$05,$05,$05 ;48 58 49 59 2a 3a 24 34 0b 0b 0b 0b 48 58 49 59	SIGN	SIGN
    .db $05,$05,$05,$05,$05,$04,$05,$04,$05,$05,$05,$05,$05,$05,$05,$05 ;37 37 37 37 27 50 27 51 07 17 08 18 09 19 0a 1a
    .db $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05 ;2e 3e 2f 3f 2e 2e 2f 2f 20 30 21 31 7a 7b 7b 7a	?		?		TABLE	WALLTOP
    .db $04,$04,$04,$04,$05,$05,$04,$04,$04,$04,$05,$05,$03,$03,$03,$03 ;6e 6e 6f 6f 7a 7b 6e 6e 6f 6f 7b 7a 48 58 49 59	WALL	WALL	WALL	SIGN
    .db $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$04,$04,$04,$04 ;7a 7b 7b 7a 2c 3c 2d 3d 2b 3b 2b 3b 68 78 69 79	WALLTOP					WALL
    .db $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05 ;7a 7b 7b 7a 48 58 49 59 4c 5c 4d 5d 4e 5e 4f 5f	WALLTOP
    .db $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05 ;4a 5a 4b 5b 22 32 23 33 38 38 38 38 29 39 2a 3a
    .db $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05 ;2a 3a 2a 3a 29 39 24 34 27 5a 27 5b 48 58 49 59
    .db $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05 ;2b 3b 38 38 38 38 2b 3b 0c 1c 0c 1c 27 5a 27 5b
    .db $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$04,$04,$04,$04 ;12 12 00 10 01 11 02 02 12 12 01 11 6e 6e 6f 6f							WALL
    .db $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05 ;4d 5e 4c 5f ff 6c 6c ff 6a 6a 6b 6b 27 6c 27 ff
    .db $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05 ;02 02 02 02 1b 1b 1b 1b 0b 0b 0b 0b 0e 1e 1e 0e
    .db $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05 ;25 35 26 36 4a 5a 5a 4a 4e 5c 4f 5d 00 10 02 02
    .db $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05 ;27 27 27 27 78 78 79 79 78 78 79 79 44 54 45 55
    .db $05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05 ;46 56 47 57 00 10 01 11 40 50 41 51 42 52 43 53					FLOOR	CHAIR
.ENDS

.BANK $1F SLOT 1
.ORGA $7FFF
.SECTION "The End" OVERWRITE
    .db $FF
.ENDS

;00000 Main code
;04000 Unknown
;08000 Metatile and map data?
;0c000 string table?
;10000 Unknown
;14000 Unknown
;18000 Metatile and map data?
;1C000 Metatile and map data?
;20000 Metatile and map data?
;24000 Unknown
;28000 Unknown
;2C000 Unknown
;30000 Unknown
;34000 Unknown
;38000 Unknown
;3C000 Unknown

;Game draws 24 tiles into the vram bg map for columns or rows, rather than all 32

;Writes Metatile data into first output buffer
;0a78 = load metatile to c880 when moving right
;0b2c = load metatile to c880 when moving left
;0a79~0aac is identical to 0b2d~0b60
;0be0 = load metatile to c880 when moving up
;0c99 = load metatile to c880 when moving down
;0be0~0c19 is identical to 0c9a~0cd2

.BANK 0 SLOT 0
.ORG $0A78
.SECTION "LoadMetatileToBufferRight_Hook" OVERWRITE
	call LoadMetatileColumnToBuffer
.ENDS
.ORG $0B2C
.SECTION "LoadMetatileToBufferLeft_Hook" OVERWRITE
	call LoadMetatileColumnToBuffer
.ENDS
.ORG $0BE0
.SECTION "LoadMetatileToBufferUp_Hook" OVERWRITE
	call LoadMetatileRowToBuffer
.ENDS
.ORG $0C99
.SECTION "LoadMetatileToBufferDown_Hook" OVERWRITE
	call LoadMetatileRowToBuffer
.ENDS

.SECTION "LoadMetatileColumnToBuffer_Code" FREE
 LoadMetatileRowToBuffer:
	push hl
	push de
	push bc
	push af
	inc h ;C9 block instead of C8
	
	ld a, $16
	ld (CHANGE_BANK), a
	
	ld a, (de)
	ldi (hl), a
	inc de
	inc de
	ld a, (de)
	ld (hl), a
	dec de
	ld bc, $0017
	add hl, bc
	ld a, (de)
	ldi (hl), a
	inc de
	inc de
	ld a, (de)
	ld (hl), a

	ld a, $06
	ld (CHANGE_BANK), a

	pop af
	pop bc
	pop de
	pop hl

	;Replicates the three bytes that this call replaced above
	ld a, (de)
	ldi (hl), a
	inc de
	ret
.ENDS

.SECTION "LoadMetatileRowToBuffer_Code" FREE
 LoadMetatileColumnToBuffer:
	push hl
	push de
	push bc
	push af
	inc h ;C9 block instead of C8
	
	ld a, $16
	ld (CHANGE_BANK), a

	ld a, (de)
	ldi (hl), a
	inc de
	ld a, (de)
	ld (hl), a
	inc de
	ld bc, $0015
	add hl, bc
	ld a, (de)
	ldi (hl), a
	inc de
	ld a, (de)
	ld (hl), a

	ld a, $06
	ld (CHANGE_BANK), a

	pop af
	pop bc
	pop de
	pop hl

	;Replicates the three bytes that this call replaced above
	ld a, (de)
	ldi (hl), a
	inc de
	ret
.ENDS

;Write tile data into second output buffer
;396D = load tile row IDs into C103~C11A from C880~C897
;399C = load tile col IDs into C103~C11A from C880~C897

.BANK 0 SLOT 0
.ORG $396D
.SECTION "LoadBufferToStageRow_Hook" OVERWRITE
	call LoadBufferToStage
.ENDS
.ORG $399C
.SECTION "LoadBufferToStageCol_Hook" OVERWRITE
	call LoadBufferToStage
.ENDS

.BANK $00 SLOT 0
.SECTION "LoadBufferToStage_Code" FREE
 LoadBufferToStage:
	push hl
	push af
	inc d ;C9 block instead of C8
	
	;Add $80 for attributes
	ld a, l
	add a, $80
	ld l, a
	
_loop:
	ld a, (de)
	ldi (hl), a

	dec d
	pop af
	pop hl
	
	;Currently this just replicates the three bytes that the call above overwrote
	ld a, (de)
	ldi (hl), a
	inc de
	ret
.ENDS

;Write tile data into VRAM
;3766 = load bg tile row ids into vram from C103~C11A
;3777 = load bg tile col ids into vram from C103~C11A

.BANK $00 SLOT 0
.ORG $3766
.SECTION "HookUpdateMapVRAMRow" OVERWRITE
	call UpdateMapVRAM
.ENDS
.ORG $3777
.SECTION "HookUpdateMapVRAMCol" OVERWRITE
	call UpdateMapVRAM
.ENDS

.BANK $00 SLOT 0
.SECTION "UpdateMapVRAMCode" FREE
UpdateMapVRAM:
	push hl
	push af
	ld a, 1
	ldh (<VBK), a

	;Add $80 for attributes
	ld a, l
	add a, $80
	ld l, a

	ldi a, (hl)
	ld (de), a
	ld a, e

	ld a, 0
	ldh (<VBK), a
	
	pop af
	pop hl
	
	;Currently this just replicates the three bytes that the call above overwrote
	ldi a, (hl)
	ld (de), a
	ld a, e
	ret
.ENDS

;794f clear screen?

;0E97 load map buffer from 4710?
;0EF5 load vram from buffer?
.BANK $00 SLOT 0
.ORG $0E97
.SECTION "HookLoadMapVRAMRow" OVERWRITE
	call LoadMetatileRowToBuffer
.ENDS
.ORG $0EF5
.SECTION "HookLoadBufferToStageRow" OVERWRITE
	call LoadBufferToVRAM
.ENDS

.SECTION "LoadBufferToVRAM_Code" FREE
 LoadBufferToVRAM:
	push hl
	push af
	inc d ;C9 block instead of C8
		
	ld a, 1
	ldh (<VBK), a

_loop:
	ld a, (de)
	ldi (hl), a ;Todo: Replace this with useful color data from someplace!

	dec d
	pop af
	pop hl
	
	ld a, 0
	ldh (<VBK), a
	
	;Currently this just replicates the three bytes that the call above overwrote
	ld a, (de)
	ld (hl), a
	inc de
	ret
.ENDS
