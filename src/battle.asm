
.DEFINE WRAM_BATTLE_STUFF_ADDR				$D000
.DEFINE WRAM_BATTLE_EFFECTIDS_ADDR			$DD00
.DEFINE WRAM_BATTLE_CODE			 		$DE00
.DEFINE WRAM_BATTLE_ENEMYTILEATTR_ADDR 		$DF00
.DEFINE WRAM_BATTLE_ENEMYIDS_ADDR			$DFF0

.DEFINE ENEMIES_TO_LOAD $CC6B
.DEFINE ENEMYA_COUNT $CC36
.DEFINE ENEMYB_COUNT $CC37
.DEFINE ENEMYC_COUNT $CC38
.DEFINE ENEMYA_ID $CC59
.DEFINE ENEMYB_ID $CC5A
.DEFINE ENEMYC_ID $CC5B

.BANK $00 SLOT 0
.ORGA $2120
.SECTION "EnemyLoadToVRAM_Hook" OVERWRITE
	call EnemyLoad5ToVRAM
.ENDS

.SECTION "ClearPalette" FREE
ClearPalette:
	SET_WRAMBANK WRAM_BATTLE_BANK
	call WRAM_BATTLE_CODE + ClearPalette_Far - BATTLECODE_FAR_START
	RESET_WRAMBANK
	call $218F
	ret
.ENDS

.SECTION "BattleBase_Code" FREE
;Should probably move this from battle and call it Load5TileIDsToVRAM.
EnemyLoad5ToVRAM:
;NOTE: This code must be FAST to eliminate a race condition on the last boss.
;The Xagor effect removes the vblank hook and before it puts a new one in, vblank has happened.
;This hook currently has to check to see if its writing enemy tiles - we should probably figure
;out how to hook someplace that we can be certain already is doing enemy tiles.  But as it is now,
;checking the range ONCE for five writes is avoiding the crash.
	ld a, h
	and a, $F0
	cp $90
	jr equ, _textbox
	cp $D0
	jr lst, _done
	ld a, d
	cp $98
	jr lst, _done

	di

	SET_WRAMBANK WRAM_BATTLE_BANK
	SET_VRAMBANK 1
	push hl
	push de

	ldi a, (hl)
	ld (de), a
	inc de
	ldi a, (hl)
	ld (de), a
	inc de
	ldi a, (hl)
	ld (de), a
	inc de
	ldi a, (hl)
	ld (de), a
	inc de
	ldi a, (hl)
	ld (de), a

	pop de
	pop hl

	RESET_WRAMBANK
	RESET_VRAMBANK
	ei
_done:

	;Currently this just replicates the three bytes that the call above overwrote
	ldi a, (hl)
	ld (de), a
	inc de
	ret

_textbox:
	SET_VRAMBANK 1
	push hl
	push de
	push de
	pop hl
	ld a, 7
	ldi (hl), a
	ldi (hl), a
	ldi (hl), a
	ldi (hl), a
	ldi (hl), a
	pop de
	pop hl
	RESET_VRAMBANK
	jr _done
.ENDS

;2120 load enemy tiles
;01:6066 erase background for battle
;0f:7966 erase enemy after dying
;D000 enemy tiles
;0B:42D5 loads sequential tiles for enemies into d000 block

;01:5F28 might be a good place to white out the bg palette during battle load
;0B:400D might be a good place to reload the bg palette

;00:1126 calls the battle program?
;0B:4000 seems like its the start of the battle program, seems to take no params
;0B:405A is the topmost call of the battle program that loads the entirety of the tiles and tilemaps for enemies.
; ld a, $FF
; ld hl, $9800
; ld bc, $0400
; call $218F	;Does not seem to be important to battle program...
; call $1D9E	;Set up window?
; call $5A18	;Loads enemy party data from $cc59~5B, with each byte being an enemy ID and FF being done. Sets number of enemies.
; call $40BF
; ld hl, $D800
; ld de, $9000
; ld bc, $07C0
; call $20FF
;After that point, all bg tiles are copied.

;40D5 loads enemy 1
;40E2 loads enemy 2
;40EF loads enemy 3
;All call $417D
;$4301 is the map of enemy IDs to art indices

;CC36~38 enemy counts
;CC59~5B enemy IDs
;00 FUNGUS		01 MUSHROOM
;02 STARFISH	03 PENTAGON
;04 F-DRAKE		05 F-LIZ		06 SALAMAND
;07 RAVEN		08 AMPREX		09 GRIFFON
;0A WORM		0B LANDWORM		0C GIGAWORM
;0D TURTLE		0E ADAMANT		0F IGASAUR
;10 WHISPER		11 FIREBALL
;12 BIG EYE		13 EVIL EYE
;14 BLACK CAT	15 MUMMYCAT
;16 SQUID		17 AMOEBA
;18 TIRE 		19 WHEEL		1A FIREFAN
;1B BABYWYRM	1C WYRM KID		1D WYRM
;1E WOLF		1F GREYWOLF		20 ROMULUS
;21 RAY			22 DRAINRAY		23 BOLTRAY
;24 D.BONE		25 D.FOSSIL
;26 TYPHOON		27 TEMPEST
;28 SCORPION	29 HUNTER
;2A ANGLER		2B BULBFISH
;2C DUALMASK	2D EVILMASK
;2E GHOST		2F SPECTER
;30 SNAKE		31 SERPENT		32 HYDRA
;33 OCTOPUS		34 AMMONITE		35 KRAKEN
;36 BABY-D		37 YOUNG-D		38 SEI-RYU
;39 GARGOYLE	3A REMORA		3B GARUDA
;3C SILVER		3D KELPIE		3E MUSTANG		3F CENTAUR		40 NITEMARE
;41 ORC-ORC		42 MAD BOAR 	43 PIRATE		44 WEREPIG		45 VIKING
;46 DIVINER		47 BROOMER		48 WITCH		49 MAGICIAN		4A WIZARD
;4B SPRITE		4C NYMPH		4D FAIRY		4E PIXIE		4F SYLPH
;50 MEDUSA		51 LAMIA		52 NAGA			53 SCYLLA		54 ECHIDNA
;55 FISH MAN 	56 MERMAN		57 NIX			58 SELKIE		59 GILL MAN
;5A WATCHER		5B HERMIT		5C MAGE			5D SORCERER		5E WARLOCK
;5F THANOS		60 SOARX		61 SIREN		62 SUCCUBUS		63 SPHINX
;64 FIGHTER		65 WARRIOR		66 LIZ MAN 		67 LIZ DUKE		68 LIZ KING
;69 SEAMONK		6A SALTMONK		6B BROODER		6C BIG HEAD 	6D DAGON
;6E THOTH		6F HORUS		72 OSIRIS		73 SET 			76 ANUBIS
;70 FAMILIAR	71 FIEND		74 LOKI			75 MEPHISTO		77 AESHMA
;78 HOOLIGAN	79 THIEF		7A BURGLER		7B BRIGAND		7C OUTLAW
;7D QUACKY		7E STRANGER		7F IMPOSTER		80 LOONYGUY		81 CRACKER
;82 SOLDIER		83 TERORIST		84 COMMANDO		85 HIREDGUN		86 SS
;87 RONIN		88 SAMURAI		89 HATAMOTO		8A DAIMYO		8B SHOGUN
;8C TALKER		8D BUSYBODY		8E RUMORER		8F TATTLER		90 VIRAGO
;91 HEADLESS	92 DUKE			93 DULLAHAN		94 BRAIN 		95 REMOVED
;96 ORB RAT 	97 TOMTOM		98 JERRIT		99 MAITIE		9A SPECTRAT
;9B FLOWER		9C COSMOS		9D IRONROSE		9E REAPER		9F CACTUS
;A0 GUARD		A1 KEEPER		A2 MONITOR		A3 SEARCHER		A4 ALERT
;A5 BAZOOKA		A6 75MM			A7 105MM		A8 150MM		A9 210MM
;AA TRIXSTER	AB CON MAN 		AC BEGUILER		AD SWINDLER		AE HUSTLER
;AF AIRMAID		B0 IRONLADY		B1 VALKYRIE		B2 IKEN			B3 VENUS
;B4 WATERHAG
;B5 DWELG
;B6 LARA
;B7 JORGANDR
;B8 ASHURA
;B9 DOGRA
;BA CHAOS
;BB MAITREYA
;BC FENRIR
;BD GUHA
;BE DAHAK
;BF AGRON
;C0 BALLOR
;C1 SOL
;C2 XAGOR

;406E seems to cue up a copy of 7c0 bytes from d800 to 9000
;Enemy art tiles appears to be loaded to $9000 from $d800, which is loaded from $d480 by code at 0B:412B 16 bytes at a time.
;$CC2E is tiles remaining, and $CC2F is words remaining in tile.  $d480 is loaded from $C800

;Enemies appear to be loaded by code in bank $0B, $0B:$4553 in particular appears to load hp
;Enemy loads into D680, and then is copied in slots starting at D280, $80 wide.  Each unique enemy is loaded once, and then written one or more times for their group.
;Enemy data is $4A1A + (ID) * $C
;4A26 is Mushroom
;4A3E is Pentagon hp
;4AE6 is Fireball
;4AFE is Evil Eye
;4BFA is Scorpion
;4C42 is Ghost
;4D02 is Mustang
;4D3E is Pirate
;4D4A is Werepig
;4D62 is Diviner
;4D9E is Sprite
;4DC2 is Pixie
;4ED6 is Warrior
;4FDE is Brigand
;500E is Imposter
;50B6 is Busybody

;4A19 is table of some sort?

;Stack when loading enemies:
;$0B:$400D
;$0B:$4093

;D280 = enemy, $80 bytes per enemy
;  83 = ?
;  90 = hp
;  92 = hp max
;  94 = mp
;  96 = mp max
;  98 = attack
;  99 = defense
;  9A = agility
;  9B = magic

;Warrior:	0F00000936D0D4E5E5DCE2E5FF036500D200D200A800A8001818100CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000100000FF000000FFFFFFFFFFFFFFFF28057DFFFFFFFFFFFF0000000000005700004619050000000000FFFFFF2C2F3300FF0000000000001818100CFFFFFFFFFFFFFFFFFFFFFFFF
;Werepig:	0F00000B36D0D8E5D8E3DCDAFF0344010E010E01270127011E12170DFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000100000FF00000045FFFFFFFFFFFFFF166B1B7DFFFFFFFFFF0000000000005C00321E0F050000000000FFFFFF354EA501FF0000000000001E12170DFFFFFFFFFFFFFFFFFFFFFFFF


;			                            ID  HP  MAX MP  MAX	ATDFAGMG										
;Diviner:	0F00000136BDDCE9DCE1D8E5FF0346022D002D003600360008040308FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000200000FF000000FFFFFFFFFFFFFFFF137EFFFFFFFFFFFFFF0000000000004D0000461905000000FFFFFFFFFF0F0E5102FF00000000000008040308FFFFFFFFFFFFFFFFFFFFFFFF
;Sprite:	0F00000136CCE3E5DCE7D8FFFF034B032D002D003100310003030709FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000FF000000FFFFFFFFFFFFFFFF1AFFFFFFFFFFFFFFFF0000000000004F00003C23050000000000FFFFFF0E0EC003FF00000000000003030709FFFFFFFFFFFFFFFFFFFFFFFF
;Scorpion:	0F00000963CCD6E2E5E3DCE2E1042800DF00DF00BE00BE0019131711FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000800FF140F10FFFFFFFFFFFFFFFF05275475FFFFFFFFFF0000000000005B0000461905000000FFFFFFFFFF2A2FFF00FF00000000000019131711FFFFFFFFFFFFFFFFFFFFFFFF
;Mustang:	0F00000863C6E8E6E7D4E1DAFF033E00B400B400870087001A10100BFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000FF0000006AFFFFFFFFFFFFFF1318FFFFFFFFFFFFFF0000000000005700321E0F050000000000FFFFFF282C6B00FF0000000000001A10100BFFFFFFFFFFFFFFFFFFFFFFFF
;Warrior:	0F00000936D0D4E5E5DCE2E5FF036500D200D200A800A8001818100CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000100000FF000000FFFFFFFFFFFFFFFF28057DFFFFFFFFFFFF0000000000005700004619050000000000FFFFFF2C2F3300FF0000000000001818100CFFFFFFFFFFFFFFFFFFFFFFFF
;Pirate:	0F00000836C9DCE5D4E7D8FFFF034301B400B400C300C300140A0E06FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000100000FF0000004BFFFFFFFFFFFFFF151B7DFFFFFFFFFFFF0000000000005600321E0F050000000000FFFFFF263AA201FF000000000000140A0E06FFFFFFFFFFFFFFFFFFFFFFFF
;Pixie:		0F00000A36C9DCEBDCD8FFFFFF034E03F200F2000A010A0111142026FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000800000FF000000FFFFFFFFFFFFFFFF1A617CFFFFFFFFFFFF0001000100006000003C2305419E050000FFFFFF2E360403FF00000108000011142026FFFFFFFFFFFFFFFFFFFFFFFF
;Pixie:		0F00000A36C9DCEBDCD8FFFFFF034E03F200F2000A010A0111142026FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000800000FF000000FFFFFFFFFFFFFFFF1A617CFFFFFFFFFFFF0001000100006000003C2305419E050000FFFFFF2E360403FF00000108000011142026FFFFFFFFFFFFFFFFFFFFFFFF
;Fireball:	0F00000A36BFDCE5D8D5D4DFDF041102FA00FA00450145012310171EFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000200040FF141E1EFFFFFFFFFFFFFFFF356A367E7887FFFFFF0000000000005B10004619050000001000FFFFFF2F36FF02FF0000000000002310171EFFFFFFFFFFFFFFFFFFFFFFFF
;Fireball:	0F00000A1EBFDCE5D8D5D4DFDF041102FA00FA00450145012310171EFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000200040FF141E1EFFFFFFFFFFFFFFFF356A367E7887FFFFFF0000000000005B1000461905000000FFFFFFFFFF2F36FF02FF0000000000002310171EFFFFFFFFFFFFFFFFFFFFFFFF
;Ghost:		0F00000C1FC0DBE2E6E7FFFFFF042E033901390187018701211F1C22FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000008000FF1B1E1EFFFFFFFFFFFFFFFF336A641871888CFFFF0000000000005F24004619050000000000FFFFFF3C42FF03FF000000000000211F1C22FFFFFFFFFFFFFFFFFFFFFFFF
;Skeleton:	0F00000836C2E0E3E2E6E7D8E5017F03C300C3009300930017121210FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000040FF00000041FFFFFFFFFFFFFF135F78FFFFFFFFFFFF0000000000005800321E0F050000000000FFFFFF272D8503FF00000000000017121210FFFFFFFFFFFFFFFFFFFFFFFF
;Evil Eye:	0F00000A36BEE9DCDFFFBEECD8041303010101015A015A011E160E20FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000FF0E200EFFFFFFFFFFFFFFFF0A4C5B86FFFFFFFFFF00000002000057800023BC05411E050000FFFFFF3036FF03FF0001000000001E160E20FFFFFFFFFFFFFFFFFFFFFFFF
;Skeleton:	0F00000836C2E0E3E2E6E7D8E5017F03C300C3009300930017121210FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000040FF00000041FFFFFFFFFFFFFF135F78FFFFFFFFFFFF0000000000005800321E0F050000000000FFFFFF272D8503FF00000000000017121210FFFFFFFFFFFFFFFFFFFFFFFF
;Mushroom:  0F00000B1EC6E8E6DBE5E2E2E004010018011801E200E200221D1E19FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000080FF191615FFFFFFFFFFFFFFFF1219555E77FFFFFFFF0000000000005F0000461905000000FFFFFFFFFF353AFF00FF000000000000221D1E19FFFFFFFFFFFFFFFFFFFFFFFF
;Busybody:  0F0000091EBBE8E6ECD5E2D7EC018D03F000F000C000C00018141E18FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000001000FF00000056FFFFFFFFFFFFFF614674FFFFFFFFFFFF0000000000005E00321E0F050000000000FFFFFF2C2DC203FF00000000000018141E18FFFFFFFFFFFFFFFFFFFFFFFF
;Brigand:	0F00000A36BBE5DCDAD4E1D7FF017B0104010401D000D00020161A13FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000FF00000057FFFFFFFFFFFFFF6B14FFFFFFFFFFFFFF0022000000005D0000461905411E050000FFFFFF3248AC01FF01040000000020161A13FFFFFFFFFFFFFFFFFFFFFFFF
;Werepig:	0F00000B36D0D8E5D8E3DCDAFF0344010E010E01270127011E12170DFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000100000FF00000045FFFFFFFFFFFFFF166B1B7DFFFFFFFFFF0000000000005C00321E0F050000000000FFFFFF354EA501FF0000000000001E12170DFFFFFFFFFFFFFFFFFFFFFFFF
;MummyCat:	0F00001436BBDFD4D6DEBCD4E704140049024902D401D4013F353A3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000800FF323039FFFFFFFFFFFFFFFF1300665556758CFFFF0000000000007204004619050000004000FFFFFF7686FF00FF0000000000003F353A3FFFFFFFFFFFFFFFFFFFFFFFFF
;Samurai:	0F00001436CCD4E0E8E5D4DCFF01880351025102DB01DB013E3A3E42FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000020FF000000FFFFFFFFFFFFFFFF150B1E583179FFFFFF0000000000007400004619050000000000FFFFFF768DFF03FF0000000000003E3A3E42FFFFFFFFFFFFFFFFFFFFFFFF
;Samurai:	0F00001436CCD4E0E8E5D4DCFF01880351025102DB01DB013E3A3E42FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000020FF000000FFFFFFFFFFFFFFFF150B1E583179FFFFFF0000000000007400004619050000000000FFFFFF768DFF03FF0000000000003E3A3E42FFFFFFFFFFFFFFFFFFFFFFFF
;Merman:	0F00001436C6D8E5E0D4E1FFFF0356013E023E02220222023D3E3736FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000FF000000FFFFFFFFFFFFFFFF06051832658AFFFFFF0000000000007050004619050000000000FFFFFF7586C801FF0000000000003D3E3736FFFFFFFFFFFFFFFFFFFFFFFF
;Virago: 	0F00001BE0CFDCE5D4DAE2FFFF01900351035103A802A802544F5E55FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000001000FF00000058FFFFFFFFFFFFFF1868614674FFFFFFFF08800000000087001E320F05411E050000FFFFFFACB45903FF080040000000544F5E55FFFFFFFFFFFFFFFFFFFFFFFF
;Dagon:  	0F00001BE0BDD4DAE2E1FFFFFF036D0140034003ED02ED025053495BFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000400000FF000000FFFFFFFFFFFFFFFF1634584C567FFFFFFF0010040000007D0000411E055A05054000FFFFFFAEBD0901FF0000008000405053495BFFFFFFFFFFFFFFFFFFFFFFFF
;Sol:		0F000001CECCE2DFFFFFFFFFFF04C10060EA60EA60EA60EA01010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FCE0FF0101014DFFFFFFFFFFFFFF64381D5870FFFFFFFF0000000000004C000F321E050000000000FFFFFF0000FF00FF00000000000001010101FFFFFFFFFFFFFFFFFFFFFFFF

.BANK $01 SLOT 1
.ORGA $6064
.SECTION "ClearMap_Hook" OVERWRITE
	call ClearMap
.ENDS

.ORGA $5F28
.SECTION "ClearPalette_Hook" OVERWRITE
	call ClearPalette
.ENDS

.SECTION "ClearMap_Code" FREE	
ClearMap:
	ld a, 1
	ldh (<VBK), a
	xor a
	ld (hl), a
	ldh (<VBK), a

	dec a
	ld (hl), a

	ret
.ENDS

;02:41CA looks responsible for loading spell sprites - if we can trap the source
;address we can probably colorize the first 30 OAM entries based on a lookup from
;the source address
;Looks like a lot of the basic spells share the same data block of 658C, each using
;different subsets of the tiles
;02:4FCA loads zero into the attribute byte

;658C: Magma, Quake, Lit 1, Lit 2, Ice 2
;68AC: Durend
;6A2C: Sword
;6AAC: XCalibur
;6ACC: Gungnir
;6C8C: Fatal
;75CC: Aero
;79EC: Flare, Fire 2, LitX
;DE61: Numbers and Missed

.BANK $02 SLOT 1
.ORGA $41CA
.SECTION "StoreEffectSpriteIDs_Hook" OVERWRITE
	call StoreEffectSpriteIDs
.ENDS

.BANK $02 SLOT 1
.ORGA $42A8
.SECTION "LoadEffectSpriteAttributes_Hook" OVERWRITE
	call LoadEffectSpriteAttributes
	and a, $07
.ENDS

.BANK $02 SLOT 1
.SECTION "SpriteIDs_Code" FREE
StoreEffectSpriteIDs:
	push af
	di
	SET_WRAMBANK WRAM_BATTLE_BANK
	pop af
	call WRAM_BATTLE_CODE + StoreEffectSpriteIDs_Far - BATTLECODE_FAR_START
	push af
	RESET_WRAMBANK
	ei
	pop af

	;original code
	call $20FF
	ret

LoadEffectSpriteAttributes:
	di
	SET_WRAMBANK WRAM_BATTLE_BANK
	call WRAM_BATTLE_CODE + LoadEffectSpriteAttributes_Far - BATTLECODE_FAR_START
	push af
	RESET_WRAMBANK
	ei
	pop af
	ret
.ENDS

;$CC51~$CC59 or so contain the dimensions of each enemy in the battle, which is written to by $5BD5
;0B:4232 loads dimensions from HL (CC56 at the time), and if it's $77 jumps to $4240, if it's $F7 jumps to $4277, otherwise $42B6
;0B:42B6 appears to take A as tile dimensions, with the high and low bit being height and width minus 1.
;Looks like enemy tiles are loaded right to left, bottom to top?  Call is $B:$421C
;Destination locations start at $CC41, with x and y bytes for each enemy.  These are written by 0B:5BB8
;CC6B is the number of enemies left to draw
;CC6F is source tile number for the draw, and it changes by the time each is drawn

.BANK $0B SLOT 1
.ORGA $400D
.SECTION "LoadBattlePalette_Hook" OVERWRITE
	call LoadBattlePalette
.ENDS

.ORGA $406B
.SECTION "StartBattle_Hook" OVERWRITE
	call StartBattle
.ENDS

.ORGA $42D5
.SECTION "EnemyLoadToRam_Hook" OVERWRITE
	call EnemyLoadToRam
.ENDS

.SECTION "Battle_Code" FREE	
StartBattle:
	di
	push hl
	push bc
	push af

	ld a, WRAM_BATTLE_BANK
	ldh (<SVBK), a

	ld hl, $DFF0

_enemyA:
	ld a, (ENEMYA_COUNT)
	cp $00
	jr equ, _enemyB
	ld c, a
_loopEnemyA:
	ld a, (ENEMYA_ID)
	ldi (hl), a
	dec c
	jr nz, _loopEnemyA

_enemyB:
	ld a, (ENEMYB_COUNT)
	cp $00
	jr equ, _enemyC
	ld c, a
_loopEnemyB:
	ld a, (ENEMYB_ID)
	ldi (hl), a
	dec c
	jr nz, _loopEnemyB

_enemyC:
	ld a, (ENEMYC_COUNT)
	cp $00
	jr equ, _done
	ld c, a
_loopEnemyC:
	ld a, (ENEMYC_ID)
	ldi (hl), a
	dec c
	jr nz, _loopEnemyC

_done:

	ld a, WRAM_DEFAULT_BANK
	ldh (<SVBK), a

	pop af
	pop bc
	pop hl

	;Skip a whole vblank because the above code was too slow to fit
_wait:
    ldh a, ($44)
    cp a, 0
    jr nz, _wait
    ei

	;Currently this just replicates the three bytes that the call above overwrote
	call $40BF
	ret

LoadBattlePalette:
	push af
	push bc
	push hl

	SET_WRAMBANK WRAM_PALETTE_BANK

	ld a, 2
	ld ($DFFF), a

    ld hl,WRAM_BATTLEPALETTE_ADDR
    ld a, $80           ; Set index to first color + auto-increment
    ldh (<BCPS), a  ; 
    ld b, 64                ; 64=0x40 bytes
_PaletteLoop:
    WAITBLANK
    ldi a,(hl)
    ldh (<BCPD),a
    dec b
    jr nz,_PaletteLoop

	RESET_WRAMBANK

    pop hl
    pop bc
    pop af

    ;Original code
    call $4444
    ret

EnemyLoadToRam:
	di
	push af
	ld a, WRAM_BATTLE_BANK
	ldh (<SVBK), a
	call WRAM_BATTLE_CODE + EnemyLoadToRam_Far - BATTLECODE_FAR_START
	ld a, WRAM_DEFAULT_BANK
	ldh (<SVBK), a
	pop af
	ei

	;Currently this just replicates the three bytes that the call above overwrote
	ldi (hl), a
	inc a
	dec c

	ret
.ENDS

.BANK $10 SLOT 1
.SECTION "Battle_Code_Far" FREE	
BATTLECODE_FAR_START:
ClearPalette_Far:
    ld a, $80           ; Set index to first color + auto-increment
    ldh (<BCPS), a  ; 
    ld b, 64                ; 64=0x40 bytes
_PaletteLoop:
    WAITBLANK
    ld a, $FF
    ldh (<BCPD),a
    dec b
    jr nz,_PaletteLoop
	ret

EnemyLoadToRam_Far:
	push de

	;de = $DFF0 + (ENEMIES_TO_LOAD)
	ld d, $DF
	ld a, (ENEMIES_TO_LOAD)
	dec a
	or a, $F0
	ld e, a

	;get enemy id into a
	ld a, (de)

	;get enemy attribute into a
	push hl
	ld hl, WRAM_BATTLE_ENEMYTILEATTR_ADDR
	ld l, a
	ld a, (hl)
	pop hl

	pop de

	;load attribute into (hl)
	ld (hl), a

	ret

;bc is count
;de is destination
;hl is source
StoreEffectSpriteIDs_Far:
	push hl
	push de
	push af
	push bc

	SET_ROMBANK $1B

	push hl
	push de
	push bc
	ld hl, DEFAULT_EFFECT_PALETTES
	ld de, WRAM_BATTLE_EFFECTIDS_ADDR
	ld b, $6C
_defaultLoop:
	ldi a, (hl)
	ld (de), a
	inc de
	dec b
	jr nz, _defaultLoop
	pop bc
	pop de
	pop hl

	;Subtract $6500 from HL
	ld a, h
	sub a, $65
	ld h, a

	;Divide HL by $10
	srl h
	rr l
	srl h
	rr l
	srl h
	rr l
	srl h
	rr l

  	;Add $4000 to HL
  	ld a, h
  	add a, $40
  	ld h, a

  	;Copy to HL
	push hl
	pop de

	;Divide BC by $10 - safe to assume it will be 8 bit afterwards (PRETTY SURE it'll always be $20)
	srl b
	rr c
	srl b
	rr c
	srl b
	rr c
	srl b
	rr c

	ld hl, WRAM_BATTLE_EFFECTIDS_ADDR

_storeLoop:
	ld a, (de)
	ldi (hl), a
	inc de
	dec c
	jr nz, _storeLoop

	SET_ROMBANK $02

	pop bc
	pop af
	pop de
	pop hl
	ret

;a is game-native attribute
;c is count
;hl is destination (C000~C09F)
LoadEffectSpriteAttributes_Far:
	push de
	push bc

	dec hl
	ldi a, (hl)
	ld e, a
	ld d, >WRAM_BATTLE_EFFECTIDS_ADDR

	ld a, (de)
	or b

	pop bc
	pop de
	ret

BATTLECODE_FAR_END:
.ENDS

.define EFFECT_GRAY 	$00,$00,$00,$00
.define EFFECT_RED 		$01,$01,$01,$01
.define EFFECT_YELLOW 	$02,$02,$02,$02
.define EFFECT_GREEN	$03,$03,$03,$03
.define EFFECT_AQUA 	$04,$04,$04,$04
.define EFFECT_BLUE 	$05,$05,$05,$05
.define EFFECT_PURPLE 	$06,$06,$06,$06
.define EFFECT_BROWN 	$07,$07,$07,$07

;658C: Magma, Quake, Lit 1, Lit 2, Ice 2
;68AC: Durend
;6A2C: Sword
;6AAC: XCalibur
;6ACC: Gungnir
;6C8C: Fatal
;75CC: Aero
;79EC: Flare, Fire 2, LitX

;414E: FIRE2

.BANK $1B SLOT 1
.ORGA $4000
.SECTION "EffectPalettes_Data" OVERWRITE
EffectPalettes:
	;4000 (02:6000)
	.db $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00
	;4010 (02:6100)
	.db $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00
	;4020 (02:6200)
	.db $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00
	;4030 (02:6300)
	.db $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$05,$05, $05,$05,$05,$05;					SWORD	SWORD
	;4040 (02:6400)
	.db $05,$05,$05,$05, $05,$05,$05,$05, $05,$05,$05,$05, $05,$05,$05,$05; SWORD	SWORD	SWORD	SWORD
	;4050 (02:6500)
	.db $05,$05,$05,$05, $05,$05,$05,$05, $05,$05,$07,$07, $07,$07,$07,$07;	SWORD	SWORD	SWORD	GUNGNIR
	;4060 (02:6600)
	.db $07,$07,$07,$07, $07,$07,$07,$07, $07,$07,$07,$07, $07,$07,$07,$07;	GUNGNIR	GUNGNIR	GUNGNIR GUNGNIR
	;4070 (02:6700)
	.db $07,$07,$07,$07, $07,$07,$07,$07, $06,$06,$06,$06, $06,$06,$06,$06; GUNGNIR GUNGNIR FATAL	FATAL
	;4080 (02:6800)
	.db $06,$06,$06,$06, $06,$06,$06,$06, $06,$06,$06,$06, $06,$06,$06,$06;	FATAL	FATAL	FATAL	FATAL
	;4090 (02:6900)
	.db $06,$06,$06,$06, $06,$06,$06,$06, $00,$00,$00,$00, $00,$00,$00,$00;	FATAL	FATAL
	;40A0 (02:6A00)
	.db $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00
	;40B0 (02:6B00)
	.db $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00
	;40C0 (02:6C00)
	.db $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00
	;40D0 (02:6D00)
	.db $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00
	;40E0 (02:6E00)
	.db $00,$00,$00,$00, $00,$00,$00,$00, $06,$06,$06,$06, $06,$06,$06,$60;					MUTE	MUTE
	;40F0 (02:6F00)
	.db $06,$06,$06,$06, $06,$06,$06,$06, $06,$06,$06,$06, $06,$06,$06,$06;	MUTE	MUTE	MUTE	MUTE
	;4100 (02:7000)
	.db $06,$06,$06,$06, $06,$06,$06,$06, $00,$00,$00,$00, $03,$03,$03,$03; MUTE	MUTE			AERO
	;4110 (02:7100)
	.db $03,$03,$03,$03, $03,$03,$03,$03, $03,$03,$03,$03, $03,$03,$03,$03;	AERO	AERO	AERO	AERO
	;4120 (02:7200)
	.db $03,$03,$03,$03, $03,$03,$03,$03, $03,$03,$03,$03, $00,$00,$00,$00;	AERO	AERO	AERO
	;4130 (02:7300)
	.db $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00
	;4140 (02:7400)
	.db $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$01,$01;							FLARE
	;4150 (02:7500)
	.db $01,$01,$01,$01, $01,$01,$01,$01, $01,$01,$01,$01, $01,$01,$01,$01;	FLARE	FLARE	FLARE	FLARE
	;4160 (02:7600)
	.db $01,$01,$01,$01, $01,$01,$01,$01, $01,$01,$01,$01, $01,$01,$00,$00;	FLARE	FLARE	FLARE
	;4170 (02:7700)
	.db $00,$00,$00,$00, $00,$00,$02,$02, $02,$02,$02,$02, $02,$02,$02,$02;			PBLAST	PBLAST	PBLAST
	;4180 (02:7800)
	.db $02,$02,$02,$02, $02,$02,$02,$02, $02,$02,$02,$02, $02,$02,$02,$02;	PBLAST	PBLAST	PBLAST	PBLAST
	;4190 (02:7900)
	.db $02,$02,$02,$02, $00,$00,$00,$00, $00,$00,$04,$04, $04,$04,$04,$04;	PBLAST			SLEEP	SLEEP
	;41A0 (02:7A00)
	.db $04,$04,$04,$04, $04,$04,$04,$04, $04,$04,$04,$04, $04,$04,$04,$04;	SLEEP	SLEEP	SLEEP	SLEEP
	;41B0 (02:7B00)
	.db $04,$04,$04,$04, $04,$04,$04,$04, $04,$04,$00,$00, $00,$00,$00,$00;	SLEEP	SLEEP
	;41C0 (02:7C00)
	.db $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00
	;41D0 (02:7D00)
	.db $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00
	;41E0 (02:7E00)
	.db $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00
	;41F0 (02:7F00)
	.db $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00
DEFAULT_EFFECT_PALETTES:
	.db $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00
	.db $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00, $00,$00,$00,$00
	.db $00,$00,$00,$00, $00,$00,$04,$04, $04,$04,$04,$04, $04,$04,$01,$01
	.db $01,$01,$01,$01, $01,$01,$01,$01, $01,$01,$01,$01, $01,$01,$04,$04
	.db $02,$02,$02,$02, $02,$02,$02,$02, $02,$02,$02,$02, $02,$02,$02,$02
	.db $04,$04,$04,$04, $03,$03,$03,$03, $03,$03,$03,$03, $03,$03,$03,$03
	.db $03,$03,$03,$03, $02,$02,$02,$02, $06,$06,$06,$06
.ENDS
